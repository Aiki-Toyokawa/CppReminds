・アドレス
アドレス演算子 & を変数につければ、つけた変数のアドレスがわかる。　(例)　&変数名
アドレスはメモリ上の「位置」をあらわす。
メモリ上の位置を示すためにアドレスは使われる。

・ポインタ
アドレスを格納する特殊な変数のことをポインタという。
*演算子は間接参照演算子という。
int* pA; (int *pA;) これを「int型へのポインタpA」という。 (例)pA
int型へのポインタpAにはint型以外の値のアドレスを格納することはできない。
ポインタpAにはaのアドレスである&aを代入する。　pA = &a;
出力)  a : 値,   &a : アドレス,   pA : アドレス,   *pA : 値
注)pA, pB両方をポインタとして扱いたいとき、(誤)int* pA, pB;　は　int* pA; int pB;ということになることに注意 → (正)int *pA, *pB;

・参照 reference
型名& 参照名 = 変数;
例)int a;
   int& rA = a; (初期化しないと使えない)
参照は必ず参照の対象となる変数で初期化しておかなければいけない。
 rA, a は同値。　rA == a;
 参照rAに値を代入すると、参照元のaの値とアドレスも変わる。


簡単に)
int a; 
int* pa;

pa = &a; // &aは変数aのアドレス
         // *pa == a; 

a(int)に値を代入したとき、&a(int)は値のアドレスを表し、
pa(int*)はアドレスを格納でき、*pa(int*)はそれに格納されているアドレスが指す値と同値。

関数内で実引数を変更しないようにするためには、仮引数にconstをつける。

・動的メモリ
例)*int pA;
   pA = new int;


・関数への値渡し
1.void Add(n){}
2.void Add(*n){}
3.void Add(&n){}

int a;

1.Add(a)
2.Add(&a)
3.Add(a)
